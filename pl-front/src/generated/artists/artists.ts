/**
 * Generated by orval v6.26.0 🍺
 * Do not edit manually.
 * playlist
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { Artist } from ".././model";
import { backendCustomInstance } from "../../libs/backend/customInstance";
import type { ErrorType } from "../../libs/backend/customInstance";

/**
 * @summary Add a new artist
 */
export const createArtist = (artist: Artist) => {
  return backendCustomInstance<void>({
    url: `/artists`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: artist,
  });
};

export const getCreateArtistMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createArtist>>,
    TError,
    { data: Artist },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createArtist>>,
  TError,
  { data: Artist },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createArtist>>,
    { data: Artist }
  > = (props) => {
    const { data } = props ?? {};

    return createArtist(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateArtistMutationResult = NonNullable<
  Awaited<ReturnType<typeof createArtist>>
>;
export type CreateArtistMutationBody = Artist;
export type CreateArtistMutationError = ErrorType<unknown>;

/**
 * @summary Add a new artist
 */
export const useCreateArtist = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createArtist>>,
    TError,
    { data: Artist },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createArtist>>,
  TError,
  { data: Artist },
  TContext
> => {
  const mutationOptions = getCreateArtistMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary get artist list
 */
export const listArtists = (signal?: AbortSignal) => {
  return backendCustomInstance<Artist[]>({
    url: `/artists`,
    method: "GET",
    signal,
  });
};

export const getListArtistsQueryKey = () => {
  return [`/artists`] as const;
};

export const getListArtistsQueryOptions = <
  TData = Awaited<ReturnType<typeof listArtists>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listArtists>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListArtistsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listArtists>>> = ({
    signal,
  }) => listArtists(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listArtists>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListArtistsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listArtists>>
>;
export type ListArtistsQueryError = ErrorType<unknown>;

/**
 * @summary get artist list
 */
export const useListArtists = <
  TData = Awaited<ReturnType<typeof listArtists>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listArtists>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListArtistsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get artist by artist id
 */
export const getArtist = (id: string, signal?: AbortSignal) => {
  return backendCustomInstance<Artist>({
    url: `/artists/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetArtistQueryKey = (id: string) => {
  return [`/artists/${id}`] as const;
};

export const getGetArtistQueryOptions = <
  TData = Awaited<ReturnType<typeof getArtist>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getArtist>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetArtistQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getArtist>>> = ({
    signal,
  }) => getArtist(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getArtist>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetArtistQueryResult = NonNullable<
  Awaited<ReturnType<typeof getArtist>>
>;
export type GetArtistQueryError = ErrorType<void>;

/**
 * @summary Get artist by artist id
 */
export const useGetArtist = <
  TData = Awaited<ReturnType<typeof getArtist>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getArtist>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetArtistQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * This can only be done by the logged in artist.
 * @summary Update artist
 */
export const updateArtist = (id: string, artist: Artist) => {
  return backendCustomInstance<void>({
    url: `/artists/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: artist,
  });
};

export const getUpdateArtistMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateArtist>>,
    TError,
    { id: string; data: Artist },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateArtist>>,
  TError,
  { id: string; data: Artist },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateArtist>>,
    { id: string; data: Artist }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateArtist(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateArtistMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateArtist>>
>;
export type UpdateArtistMutationBody = Artist;
export type UpdateArtistMutationError = ErrorType<void>;

/**
 * @summary Update artist
 */
export const useUpdateArtist = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateArtist>>,
    TError,
    { id: string; data: Artist },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateArtist>>,
  TError,
  { id: string; data: Artist },
  TContext
> => {
  const mutationOptions = getUpdateArtistMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * This can only be done by the logged in artist.
 * @summary Delete artist
 */
export const deleteArtist = (id: string) => {
  return backendCustomInstance<unknown>({
    url: `/artists/${id}`,
    method: "DELETE",
  });
};

export const getDeleteArtistMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArtist>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteArtist>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteArtist>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteArtist(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteArtistMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteArtist>>
>;

export type DeleteArtistMutationError = ErrorType<void>;

/**
 * @summary Delete artist
 */
export const useDeleteArtist = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArtist>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteArtist>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteArtistMutationOptions(options);

  return useMutation(mutationOptions);
};
