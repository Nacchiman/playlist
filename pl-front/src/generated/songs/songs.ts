/**
 * Generated by orval v6.26.0 🍺
 * Do not edit manually.
 * playlist
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { Song } from ".././model";
import { backendCustomInstance } from "../../libs/backend/customInstance";
import type { ErrorType } from "../../libs/backend/customInstance";

/**
 * @summary Add a new song
 */
export const createSong = (song: Song) => {
  return backendCustomInstance<void>({
    url: `/songs`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: song,
  });
};

export const getCreateSongMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSong>>,
    TError,
    { data: Song },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createSong>>,
  TError,
  { data: Song },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createSong>>,
    { data: Song }
  > = (props) => {
    const { data } = props ?? {};

    return createSong(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateSongMutationResult = NonNullable<
  Awaited<ReturnType<typeof createSong>>
>;
export type CreateSongMutationBody = Song;
export type CreateSongMutationError = ErrorType<unknown>;

/**
 * @summary Add a new song
 */
export const useCreateSong = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSong>>,
    TError,
    { data: Song },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createSong>>,
  TError,
  { data: Song },
  TContext
> => {
  const mutationOptions = getCreateSongMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary get song list
 */
export const listSongs = (signal?: AbortSignal) => {
  return backendCustomInstance<Song[]>({
    url: `/songs`,
    method: "GET",
    signal,
  });
};

export const getListSongsQueryKey = () => {
  return [`/songs`] as const;
};

export const getListSongsQueryOptions = <
  TData = Awaited<ReturnType<typeof listSongs>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listSongs>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListSongsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listSongs>>> = ({
    signal,
  }) => listSongs(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listSongs>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListSongsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listSongs>>
>;
export type ListSongsQueryError = ErrorType<unknown>;

/**
 * @summary get song list
 */
export const useListSongs = <
  TData = Awaited<ReturnType<typeof listSongs>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listSongs>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListSongsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get song by song id
 */
export const getSong = (id: string, signal?: AbortSignal) => {
  return backendCustomInstance<Song>({
    url: `/songs/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetSongQueryKey = (id: string) => {
  return [`/songs/${id}`] as const;
};

export const getGetSongQueryOptions = <
  TData = Awaited<ReturnType<typeof getSong>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSong>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSongQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSong>>> = ({
    signal,
  }) => getSong(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getSong>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetSongQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSong>>
>;
export type GetSongQueryError = ErrorType<void>;

/**
 * @summary Get song by song id
 */
export const useGetSong = <
  TData = Awaited<ReturnType<typeof getSong>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSong>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSongQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * This can only be done by the logged in song.
 * @summary Update song
 */
export const updateSong = (id: string, song: Song) => {
  return backendCustomInstance<void>({
    url: `/songs/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: song,
  });
};

export const getUpdateSongMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSong>>,
    TError,
    { id: string; data: Song },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateSong>>,
  TError,
  { id: string; data: Song },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateSong>>,
    { id: string; data: Song }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateSong(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateSongMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateSong>>
>;
export type UpdateSongMutationBody = Song;
export type UpdateSongMutationError = ErrorType<void>;

/**
 * @summary Update song
 */
export const useUpdateSong = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSong>>,
    TError,
    { id: string; data: Song },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateSong>>,
  TError,
  { id: string; data: Song },
  TContext
> => {
  const mutationOptions = getUpdateSongMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * This can only be done by the logged in song.
 * @summary Delete song
 */
export const deleteSong = (id: string) => {
  return backendCustomInstance<unknown>({
    url: `/songs/${id}`,
    method: "DELETE",
  });
};

export const getDeleteSongMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSong>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteSong>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteSong>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteSong(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteSongMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteSong>>
>;

export type DeleteSongMutationError = ErrorType<void>;

/**
 * @summary Delete song
 */
export const useDeleteSong = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSong>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteSong>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteSongMutationOptions(options);

  return useMutation(mutationOptions);
};
