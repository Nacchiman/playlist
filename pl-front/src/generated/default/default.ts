/**
 * Generated by orval v6.26.0 🍺
 * Do not edit manually.
 * playlist
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type { Album } from ".././model";
import { backendCustomInstance } from "../../libs/backend/customInstance";
import type { ErrorType } from "../../libs/backend/customInstance";

/**
 * @summary Get album list
 */
export const listAlbums = (signal?: AbortSignal) => {
  return backendCustomInstance<Album[]>({
    url: `/albums`,
    method: "GET",
    signal,
  });
};

export const getListAlbumsQueryKey = () => {
  return [`/albums`] as const;
};

export const getListAlbumsQueryOptions = <
  TData = Awaited<ReturnType<typeof listAlbums>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listAlbums>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListAlbumsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listAlbums>>> = ({
    signal,
  }) => listAlbums(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listAlbums>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ListAlbumsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listAlbums>>
>;
export type ListAlbumsQueryError = ErrorType<unknown>;

/**
 * @summary Get album list
 */
export const useListAlbums = <
  TData = Awaited<ReturnType<typeof listAlbums>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listAlbums>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getListAlbumsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Add new Album
 */
export const createAlbum = (album: Album) => {
  return backendCustomInstance<void>({
    url: `/albums`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: album,
  });
};

export const getCreateAlbumMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAlbum>>,
    TError,
    { data: Album },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAlbum>>,
  TError,
  { data: Album },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAlbum>>,
    { data: Album }
  > = (props) => {
    const { data } = props ?? {};

    return createAlbum(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateAlbumMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAlbum>>
>;
export type CreateAlbumMutationBody = Album;
export type CreateAlbumMutationError = ErrorType<unknown>;

/**
 * @summary Add new Album
 */
export const useCreateAlbum = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAlbum>>,
    TError,
    { data: Album },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createAlbum>>,
  TError,
  { data: Album },
  TContext
> => {
  const mutationOptions = getCreateAlbumMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Your GET endpoint
 */
export const getAlbum = (id: string, signal?: AbortSignal) => {
  return backendCustomInstance<Album>({
    url: `/albums/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetAlbumQueryKey = (id: string) => {
  return [`/albums/${id}`] as const;
};

export const getGetAlbumQueryOptions = <
  TData = Awaited<ReturnType<typeof getAlbum>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAlbum>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAlbumQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAlbum>>> = ({
    signal,
  }) => getAlbum(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getAlbum>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetAlbumQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAlbum>>
>;
export type GetAlbumQueryError = ErrorType<unknown>;

/**
 * @summary Your GET endpoint
 */
export const useGetAlbum = <
  TData = Awaited<ReturnType<typeof getAlbum>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAlbum>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAlbumQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Your PUT endpoint
 */
export const updateAlbum = (id: string, album: Album) => {
  return backendCustomInstance<void>({
    url: `/albums/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: album,
  });
};

export const getUpdateAlbumMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAlbum>>,
    TError,
    { id: string; data: Album },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAlbum>>,
  TError,
  { id: string; data: Album },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAlbum>>,
    { id: string; data: Album }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateAlbum(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateAlbumMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAlbum>>
>;
export type UpdateAlbumMutationBody = Album;
export type UpdateAlbumMutationError = ErrorType<unknown>;

/**
 * @summary Your PUT endpoint
 */
export const useUpdateAlbum = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAlbum>>,
    TError,
    { id: string; data: Album },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateAlbum>>,
  TError,
  { id: string; data: Album },
  TContext
> => {
  const mutationOptions = getUpdateAlbumMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @summary Your DELETE endpoint
 */
export const deleteAlbum = (id: string) => {
  return backendCustomInstance<void>({
    url: `/albums/${id}`,
    method: "DELETE",
  });
};

export const getDeleteAlbumMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAlbum>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteAlbum>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteAlbum>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteAlbum(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteAlbumMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteAlbum>>
>;

export type DeleteAlbumMutationError = ErrorType<unknown>;

/**
 * @summary Your DELETE endpoint
 */
export const useDeleteAlbum = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAlbum>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteAlbum>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteAlbumMutationOptions(options);

  return useMutation(mutationOptions);
};
